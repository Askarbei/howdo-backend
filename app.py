from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import json
import os
import tempfile
import uuid
import sqlite3
from datetime import datetime
from document_generator import DocumentGenerator

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
generator = DocumentGenerator()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('howdo.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id TEXT PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            created_at TEXT NOT NULL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS documents (
            id TEXT PRIMARY KEY,
            user_id TEXT NOT NULL,
            title TEXT NOT NULL,
            type TEXT NOT NULL,
            status TEXT NOT NULL,
            answers TEXT NOT NULL,
            created_at TEXT NOT NULL,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('howdo.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/api/debug', methods=['GET'])
def debug_data():
    """DEBUG: –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    try:
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = conn.execute('SELECT * FROM users').fetchall()
        users_list = [dict(u) for u in users]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents = conn.execute('SELECT * FROM documents').fetchall()
        documents_list = [dict(d) for d in documents]
        
        conn.close()
        
        return jsonify({
            'users': users_list,
            'documents': documents_list,
            'users_count': len(users_list),
            'documents_count': len(documents_list)
        })
        
    except Exception as e:
        return jsonify({'error': f'Debug error: {str(e)}'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    conn = get_db_connection()
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_count = conn.execute('SELECT COUNT(*) FROM users').fetchone()[0]
    
    # –ü–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    documents_count = conn.execute('SELECT COUNT(*) FROM documents').fetchone()[0]
    
    conn.close()
    
    return jsonify({
        'status': 'healthy',
        'documents_count': documents_count,
        'users_count': users_count,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/register', methods=['POST'])
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        
        if not email or not password:
            return jsonify({'error': 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        conn = get_db_connection()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = conn.execute('SELECT id FROM users WHERE email = ?', (email,)).fetchone()
        if existing_user:
            conn.close()
            return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 400
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(uuid.uuid4())
        conn.execute(
            'INSERT INTO users (id, email, password, created_at) VALUES (?, ?, ?, ?)',
            (user_id, email, password, datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {email} —Å ID: {user_id}")
        
        return jsonify({
            'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
            'user_id': user_id
        }), 201
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/login', methods=['POST'])
def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')
        
        if not email or not password:
            return jsonify({'error': 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
        
        conn = get_db_connection()
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = conn.execute(
            'SELECT id, email, password FROM users WHERE email = ?', 
            (email,)
        ).fetchone()
        
        conn.close()
        
        if not user or user['password'] != password:
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}), 401
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {email} —Å ID: {user['id']}")
        
        return jsonify({
            'message': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            'user_id': user['id'],
            'email': user['email']
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/wizard', methods=['POST'])
def create_standard():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä"""
    try:
        data = request.get_json()
        answers = data.get('answers', {})
        user_id = data.get('user_id', 'anonymous')
        
        print(f"üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: {answers}")
        print(f"üìù User ID: {user_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_type_map = {
            '–°–û–ö': 'sok',
            '–†–∞–±–æ—á–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': 'instruction', 
            '–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã': 'procedure'
        }
        doc_type = doc_type_map.get(answers.get('q1', ''), 'sok')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        company_name = answers.get('q2', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        process_name = answers.get('q4', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        title = f"{company_name} - {process_name}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        document_id = str(uuid.uuid4())
        conn = get_db_connection()
        
        conn.execute(
            'INSERT INTO documents (id, user_id, title, type, status, answers, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (document_id, user_id, title, doc_type, 'active', json.dumps(answers), datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {document_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        return jsonify({
            'message': '–°—Ç–∞–Ω–¥–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            'document_id': document_id,
            'title': title,
            'type': doc_type
        }), 201
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞'}), 500

@app.route('/api/documents', methods=['GET'])
def get_documents():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = request.args.get('user_id')
        
        print(f"üìã –ó–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è user_id: {user_id}")
        
        conn = get_db_connection()
        
        if user_id:
            # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            documents = conn.execute(
                'SELECT id, title, type, status, created_at FROM documents WHERE user_id = ? ORDER BY created_at DESC',
                (user_id,)
            ).fetchall()
        else:
            # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            documents = []
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        documents_list = []
        for doc in documents:
            documents_list.append({
                'id': doc['id'],
                'title': doc['title'],
                'type': doc['type'],
                'status': doc['status'],
                'created_at': doc['created_at']
            })
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(documents_list)}")
        
        return jsonify({
            'documents': documents_list,
            'count': len(documents_list)
        }), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'}), 500

@app.route('/api/export/<document_id>', methods=['GET'])
def export_document(document_id):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Word —Ñ–æ—Ä–º–∞—Ç"""
    try:
        print(f"üì§ –ó–∞–ø—Ä–æ—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_id}")
        
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        document = conn.execute(
            'SELECT title, type, answers FROM documents WHERE id = ?',
            (document_id,)
        ).fetchone()
        
        conn.close()
        
        if not document:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {document_id}")
            return jsonify({'error': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        answers = json.loads(document['answers'])
        doc_type = document['type']
        
        print(f"üìã –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {answers}")
        print(f"üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        base_data = {
            'company_name': answers.get('q2', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'business_area': answers.get('q3', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'process_name': answers.get('q4', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'target_audience': answers.get('q5', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'process_steps': answers.get('q6', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'required_resources': answers.get('q7', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'expected_results': answers.get('q8', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        }
        
        print(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {base_data}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if doc_type == 'sok':
            doc = generator.generate_sok_docx(base_data)
        elif doc_type == 'instruction':
            doc = generator.generate_instruction_docx(base_data)
        elif doc_type == 'procedure':
            doc = generator.generate_procedure_docx(base_data)
        else:
            doc = generator.generate_sok_docx(base_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
        doc.save(temp_file.name)
        temp_file.close()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_title = "".join(c for c in document['title'] if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"{safe_title}.docx"
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {filename}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        response = send_file(
            temp_file.name,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        response.headers['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        @response.call_on_close
        def cleanup():
            try:
                os.unlink(temp_file.name)
            except:
                pass
        
        return response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞'}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ HOWDO Backend —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ DEBUG...")
    app.run(host='0.0.0.0', port=5000, debug=True)

